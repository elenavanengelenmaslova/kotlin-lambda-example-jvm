name: Standard build deploy workflow for Kotlin Lambda JVM example

on:
  workflow_call:
    inputs:
      aws_region:
        required: false
        type: string
        default: "eu-west-1"
    secrets:
      aws_account_id:
        required: true
      aws_access_key:
        required: true
      aws_secret_key:
        required: true

env:
  # Supply target AWS account here
  DEPLOY_TARGET_ACCOUNT: ${{ secrets.aws_account_id }}
  DEPLOY_TARGET_REGION: ${{ inputs.aws_region }}

jobs:
  build:
    name: Build CDK Codebase
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
          cache: gradle
      - name: Build with Gradle
        run:
          ./gradlew build packageDistribution
      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2.2.4
        with:
          # Artifact name
          name: LambdaArtifacts
          # A file, directory or wildcard pattern that describes what to upload
          path: build/dist/*.zip
          # The desired behavior if no files are found using the provided path.
          if-no-files-found: error
          # Duration after which artifact will expire in days. 0 means using default retention.
          retention-days: 1

  deploy-table:
    runs-on: ubuntu-latest
    needs: [ build ]
    name: Table deploy

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.aws_access_key }}
          aws-secret-access-key: ${{ secrets.aws_secret_key }}
          aws-region: ${{ inputs.aws_region }}

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: LambdaArtifacts
          path: build/dist/

      - name: DEPLOY synthesize & deploy
        run: |
          cd ${GITHUB_WORKSPACE}/infrastructure
          npm install -g aws-cdk
          cdk deploy -vv --require-approval never Kotlin-Lambda-JVM-table --exclusively

  deploy-app:
    runs-on: ubuntu-latest
    needs: [ build, deploy-table ]
    strategy:
      matrix:
        config:
          [
            {
              component-name: "Kotlin Lambda JVM ",
              stack-name: "Kotlin-Lambda-JVM-example",
            },
            {
              component-name: "Kotlin Lambda JVM Arm64",
              stack-name: "Kotlin-Lambda-JVM-Arm64-example",
            },
            {
              component-name: "Kotlin Lambda JVM C1",
              stack-name: "Kotlin-Lambda-JVM-C1-example",
            },
            {
              component-name: "Kotlin Lambda JVM C1 Arm64",
              stack-name: "Kotlin-Lambda-JVM-C1-Arm64-example",
            },
          ]
    name: ${{ matrix.config.component-name }} deployment

    steps:
      - uses: actions/checkout@v2

      - name: Download Artifacts
        uses: actions/download-artifact@v2
        with:
          name: LambdaArtifacts
          path: build/dist/

      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.aws_access_key }}
          aws-secret-access-key: ${{ secrets.aws_secret_key }}
          aws-region: ${{ inputs.aws_region }}

      - name: DEPLOY synthesize & deploy
        run: |
          cd ${GITHUB_WORKSPACE}/infrastructure
          npm install -g aws-cdk
          cdk deploy -vv --require-approval never ${{ matrix.config.stack-name }} --exclusively